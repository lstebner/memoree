// Generated by CoffeeScript 1.10.0
(function() {
  var Memoree, dictionary_data;

  dictionary_data = {
    characters: {
      hiragana: ["あ", "え", "う", "い", "お", "か", "き", "く", "け", "こ", "さ", "し", "す", "せ", "そ", "た", "ち", "つ", "て", "と", "な", "に", "ぬ", "ね", "の", "は", "ひ", "ふ", "へ", "ほ", "ま", "み", "む", "め", "も", "や", "ゆ", "よ", "ら", "り", "る", "れ", "ろ", "わ", "お", "ん"],
      katakana: ["ア", "エ", "ウ", "イ", "オ", "カ", "ォ", "ク", "ケ", "コ", "サ", "シ", "ス", "セ", "ソ", "タ", "チ", "ツ", "テ", "ト", "ナ", "ニ", "ヌ", "ネ", "ノ", "ハ", "ヒ", "フ", "ヘ", "ホ", "マ", "ミ", "ム", "メ", "モ", "ヤ", "ユ", "ヨ", "ラ", "リ", "ル", "レ", "ロ", "ワ", "オ", "ン"]
    },
    colors: [["red", "あか"], ["yellow", "きいろ"], ["black", "くろ"], ["white", "しろ"], ["blue", "あお"], ["purple", "むらさき"], ["green", "みどり"]],
    foods: [["apple", "りんご"], ["strawberry", "いちご"], ["peach", "もも"], ["banana", "バナナ"], ["pear", "なし"], ["watermelon", "スイカ"], ["lemon", "レモン"], ["persimmon", "カキ"], ["pineapple", "パイナップル"]]
  };

  Memoree = {
    init: function() {
      this.toolbar = new Memoree.Toolbar("#toolbar");
      this.memoree = new Memoree.Main("#memoree");
      return $(document.body).on("memoree:request", (function(_this) {
        return function(e, evnt) {
          return _this.request(evnt);
        };
      })(this));
    },
    request: function(evnt) {
      if (!(_.indexOf(["reset"], evnt) > -1)) {
        return console.log("requested action is not available");
      }
      switch (evnt) {
        case "reset":
          return this.memoree.reset();
      }
    }
  };

  Memoree.Main = (function() {
    function Main(container, opts) {
      this.opts = opts != null ? opts : {};
      this.opts = _.extend({
        shuffle: true,
        mode: "echo",
        theme: "alt",
        num_tiles: 30
      }, this.opts);
      this.container = $(container);
      this.container.addClass(this.opts.theme);
      this.setup();
      this.render();
    }

    Main.prototype.setup = function() {
      this.uncovered_cards = 0;
      this.matched_cards = 0;
      this.stats = {
        clicks: 0,
        matched: 0,
        remaining: 0
      };
      this.card_zone = this.container.find(".card_zone");
      this.load_deck();
      return this.setup_events();
    };

    Main.prototype.setup_events = function() {
      return this.container.on("click", (function(_this) {
        return function(e) {
          var $currentTarget, $target, prevent, propagate;
          prevent = true;
          propagate = true;
          $target = $(e.target);
          $currentTarget = $(e.currentTarget);
          if ($target.is(".card")) {
            _this.click_card($target, e);
          }
          if (prevent) {
            e.preventDefault();
          }
          if (!propagate) {
            return e.stopPropagation();
          }
        };
      })(this));
    };

    Main.prototype.load_dictionary = function(key) {
      var c, dict, dict_data;
      dict = dictionary_data;
      dict_data = (function() {
        var i, j, len, len1, ref, ref1, results, results1;
        switch (key) {
          case "characters.hiragana":
            ref = dict.characters.hiragana;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
              c = ref[i];
              results.push([c, c]);
            }
            return results;
            break;
          case "characters.katana":
            ref1 = dict.characters.katana;
            results1 = [];
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              c = ref1[j];
              results1.push([c, c]);
            }
            return results1;
            break;
          default:
            if (dict[key] != null) {
              return dict[key];
            }
        }
      })();
      return dict_data;
    };

    Main.prototype.load_deck = function() {
      this.words = this.load_dictionary("foods");
      if (this.words.length > this.opts.num_tiles / 2) {
        this.words = _.first(_.shuffle(this.words), this.opts.num_tiles / 2);
      }
      this.stats.remaining = this.words.length;
      return this.stats_updated();
    };

    Main.prototype.stats_updated = function() {
      return this.container.trigger("memoree:stats:update", this.stats);
    };

    Main.prototype.render = function() {
      var card, cards, i, idx, j, len, len1, match, ref, results, w, word;
      this.cards = [];
      ref = this.words;
      for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
        w = ref[idx];
        word = w[1];
        match = this.opts.mode === "echo" ? word : w[1];
        card = "<div class='card' data-id='" + idx + "'><span>" + word + "</span></div>";
        this.cards.push(card);
        match = "<div class='card' data-id='" + idx + "m'><span>" + match + "</span></div>";
        this.cards.push(match);
      }
      cards = this.opts.shuffle ? _.shuffle(this.cards) : this.cards;
      results = [];
      for (j = 0, len1 = cards.length; j < len1; j++) {
        card = cards[j];
        results.push(this.card_zone.append(card));
      }
      return results;
    };

    Main.prototype.click_card = function($el, e) {
      if (this.check_cards_to || !_.isEmpty(_.intersection($el[0].classList, ["match", "miss", "uncover"]))) {
        return;
      }
      if (this.uncovered_cards < 2) {
        this.uncover($el);
      }
      if (this.uncovered_cards === 2) {
        return this.check_cards_to = setTimeout((function(_this) {
          return function() {
            _this.check_cards_to = null;
            _this.check_uncovered_cards();
            if (_this.matched_cards === _this.words.length) {
              return _this.finished();
            }
          };
        })(this), 500);
      }
    };

    Main.prototype.uncover = function($card) {
      $card.addClass("uncover");
      this.stats.clicks++;
      this.stats_updated();
      return this.uncovered_cards++;
    };

    Main.prototype.check_uncovered_cards = function() {
      var $uncovered, c, id, ids, matched, new_classes;
      $uncovered = this.container.find(".card.uncover");
      if ($uncovered.length !== 2) {
        return console.log('not enough uncovered cards');
      }
      ids = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = $uncovered.length; i < len; i++) {
          c = $uncovered[i];
          id = $(c).data("id");
          results.push(id);
        }
        return results;
      })();
      matched = this.is_match(ids[0], ids[1]);
      new_classes = matched ? (this.matched_cards++, this.stats.matched++, this.stats.remaining--, this.stats_updated(), "match") : (setTimeout((function(_this) {
        return function() {
          return _this.container.find(".miss").removeClass("miss");
        };
      })(this), 1200), "miss");
      $uncovered.addClass(new_classes).removeClass("uncover");
      this.uncovered_cards = 0;
      return matched;
    };

    Main.prototype.is_match = function(id1, id2) {
      return id2 === (id1 + "m") || id1 === (id2 + "m");
    };

    Main.prototype.finished = function() {
      console.log("all cards matched!");
      return this.container.addClass("complete");
    };

    Main.prototype.reset = function() {
      this.uncovered_cards = 0;
      this.matched_cards = 0;
      this.card_zone.html("");
      this.container.removeClass("complete");
      this.stats = {
        clicks: 0,
        matched: 0,
        remaining: this.words.length
      };
      this.stats_updated();
      this.load_deck();
      return this.render();
    };

    return Main;

  })();

  Memoree.Toolbar = (function() {
    function Toolbar(container, opts) {
      this.opts = opts != null ? opts : {};
      this.container = $(container);
      this.setup();
    }

    Toolbar.prototype.setup = function() {
      return this.setup_events();
    };

    Toolbar.prototype.setup_events = function() {
      this.container.on("click", (function(_this) {
        return function(e) {
          var $currentTarget, $target, prevent, propagate;
          prevent = true;
          propagate = true;
          $target = $(e.target);
          $currentTarget = $(e.currentTarget);
          if ($target.is(".reset_btn")) {
            if (confirm("Are you sure?")) {
              _this.container.trigger("memoree:request", "reset");
            }
          }
          if (prevent) {
            e.preventDefault();
          }
          if (!propagate) {
            return e.stopPropagation();
          }
        };
      })(this));
      return $(document.body).on("memoree:stats:update", (function(_this) {
        return function(e, stats) {
          _this.stats = stats;
          return _this.render_stats();
        };
      })(this));
    };

    Toolbar.prototype.render_stats = function() {
      var $stats, content;
      $stats = this.container.find(".stats").html("");
      content = "clicks: " + this.stats.clicks + "  matched: " + this.stats.matched + "  remaining: " + this.stats.remaining;
      $stats.text(content);
      return console.log(this.stats);
    };

    return Toolbar;

  })();

  $(function() {
    document.Memoree = Memoree;
    return document.Memoree.init();
  });

}).call(this);
